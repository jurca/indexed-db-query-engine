import RecordOp from './RecordOp.js'

/**
 * The program optimizer is used to examine and improve the runtime efficiency of a generated micro-operation program
 * while preserving the program's effects and outcome.
 *
 * The optimizer is expected to perform at least the following optimizations:
 *
 * - Jump optimization: a jump operation that is followed immediately by another jump operation or a sequence of jump
 *   operations will be replaced by a jump operation to the target location of the last jump operation in the sequence.
 *   This optimization will target the start of a loop if a jump-loop of any length is detected (note that jump loops
 *   serve no actual purpose as they are effectively no-op infinite loops). Only unconditional jumps are considered and
 *   optimized.
 *   This optimization can be efficiently implemented by analyzing the program from the end to start, as the programs
 *   generated by the query engine are not expected to jump to a lower instruction index nor do they contain any loops.
 * - Termination optimization: a jump operation that targets an exit operation will be replaced with an exit operation.
 *   This optimization is meant to be performed after jump optimization. Jumps pointing after the end of the provided
 *   program are not affected, as they already effectively work as exit operations and this enables optimization of
 *   program fragments.
 */
export default interface ProgramOptimizer {
  /**
   * Optimizes the provided program to improve the execution efficiency while preserving its effects and outcome.
   *
   * @param program The program to optimize.
   * @returns An optimized version of the provided program.
   */
  (program: readonly RecordOp[]): RecordOp[]
}
